class LibraryBook:
    def __init__(self, title, price, author, pages, stock):  # Fixed _init_ to __init__, added stock
        self._title = title
        self._price = price
        self._author = author
        self._pages = pages
        self._stock = stock

    # GET METHOD FOR BOOK NAME
    def title(self):
        return self._title
    
    # SET METHOD FOR BOOK NAME
    def set_book_name(self, name):
        if not isinstance(name, str) or not name.strip():
            print("Error: Title must be a non-empty string")
            return
        self._title = name.strip()

    # GET METHOD FOR PRICE 
    def get_price(self):
        return self._price

    # SET METHOD FOR PRICE
    def set_price(self, price):
        if not isinstance(price, (int, float)) or price < 0:
            print("Error: Price must be a non-negative number")
            return
        self._price = float(price)

    # GET METHOD FOR AUTHOR
    def get_author(self):
        return self._author

    # SET METHOD FOR AUTHOR
    def set_author(self, author):
        if not isinstance(author, str) or not author.strip():
            print("Error: Author must be a non-empty string")
            return
        self._author = author.strip()

    # GET METHOD FOR PAGES
    def get_pages(self):
        return self._pages

    # SET METHOD FOR PAGES
    def set_pages(self, pages):
        if not isinstance(pages, int) or pages <= 0:
            print("Error: Pages must be a positive integer")
            return
        self._pages = pages

    # GET METHOD FOR STOCK
    def get_stock(self):
        return self._stock

    # SET METHOD FOR STOCK
    def set_stock(self, stock):
        if not isinstance(stock, int) or stock < 0:
            print("Error: Stock must be a non-negative integer")
            return
        self._stock = stock

    # METHOD TO REDUCE STOCK
    def reduce_stock(self, quantity):
        if not isinstance(quantity, int) or quantity <= 0:
            print("Error: Quantity must be a positive integer")
            return False
        if quantity > self._stock:
            print(f"Error: Only {self._stock} copies of '{self._title}' available")
            return False
        self._stock -= quantity
        return True

    # METHOD TO DISPLAY ALL INFO 
    def display(self):
        availability = "In Stock" if self._stock > 0 else "Out of Stock"
        print("Book Details:")
        print(" Name  :", self._title)
        print(" Author:", self._author)
        print(" Price :", f"â‚¹{self._price:.2f}")
        print(" Pages :", self._pages)
        print(" Stock :", f"{self._stock} ({availability})")

# Function to simulate Flipkart-like mobile shopping
def mobile_book_shop():
    books = [
        LibraryBook("The Great Gatsby", 299.99, "F. Scott Fitzgerald", 180, 5),
        LibraryBook("1984", 199.99, "George Orwell", 328, 0),
        LibraryBook("To Kill a Mockingbird", 249.99, "Harper Lee", 281, 3),
        LibraryBook("Pride and Prejudice", 150.00, "Jane Austen", 432, 10)
    ]

    while True:
        print("\n=== Mobile Book Store ===")
        print("1. View Available Books")
        print("2. Select Book")
        print("3. Exit")
        choice = input("Enter your choice (1-3): ")

        if choice == '1':
            print("\nAvailable Books:")
            found = False
            for i, book in enumerate(books, 1):
                if book.get_stock() > 0:
                    print(f"{i}. ", end="")
                    book.display()
                    found = True
            if not found:
                print("No books available in stock.")
        elif choice == '2':
            print("\nAvailable Books:")
            found = False
            for i, book in enumerate(books, 1):
                if book.get_stock() > 0:
                    print(f"{i}. ", end="")
                    book.display()
                    found = True
            if not found:
                print("No books available in stock.")
                continue
            try:
                book_index = int(input("Enter the book number to select: "))
                if not (1 <= book_index <= len(books)):
                    print("Error: Invalid book selection")
                    continue
                book = books[book_index - 1]
                if book.get_stock() == 0:
                    print(f"Sorry, '{book.title()}' is out of stock")
                    continue
                quantity = int(input("Enter quantity (default 1): ") or 1)
                if book.reduce_stock(quantity):
                    print(f"Selected {quantity} copy(ies) of '{book.title()}'. Remaining stock: {book.get_stock()}")
            except ValueError:
                print("Error: Please enter valid numbers for book selection and quantity")
        elif choice == '3':
            print("Thank you for shopping with us!")
            break
        else:
            print("Invalid choice. Please try again.")

# Run the mobile book shop
if __name__ == "__main__":
    mobile_book_shop()
